import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Header from "../../components/Header";
import ResultList from "../../components/ResultList";
import javlibData from "../../config/javlibData.json";

function index() {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [searchCode, setSearchCode] = useState(true);

  const [searchPublisher, setSearchPublisher] = useState(false);
  const [searchActress, setSearchActress] = useState(false);
  const [searchKeywords, setSearchKeywords] = useState(false);

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);

    setSearchResults(
      javlibData.filter((collection) =>
        collection.code.includes(searchTerm.toLocaleUpperCase())
      )
    );
  };

  const handleSearchPublisher = (e) => {
    setSearchTerm(e.target.value);

    setSearchResults(
      javlibData.filter((collection) =>
        collection.publisher.includes(searchTerm.toLocaleUpperCase())
      )
    );
  };

  const handleSearchActress = (e) => {
    setSearchTerm(e.target.value);

    setSearchResults(
      javlibData.filter((collection) => collection.name.includes(searchTerm))
    );
  };

  const handleSearchKeywords = (e) => {
    setSearchTerm(e.target.value);

    setSearchResults(
      javlibData.filter((collection) =>
        collection.keywords.includes(searchTerm.toString())
      )
    );
  };

  useEffect(() => {
    if (searchCode === true) {
      setSearchResults(
        javlibData.filter((collection) =>
          collection.code.includes(searchTerm.toLocaleUpperCase())
        )
      );
    }
    if (searchPublisher === true) {
      setSearchResults(
        javlibData.filter((collection) =>
          collection.publisher.includes(searchTerm.toLocaleUpperCase())
        )
      );
    }
    if (searchActress === true) {
      setSearchResults(
        javlibData.filter((collection) => collection.name.includes(searchTerm))
      );
    }
    if (searchKeywords === true) {
      setSearchResults(
        javlibData.filter((collection) =>
          collection.keywords.includes(searchTerm)
        )
      );
    }
  }, [
    searchTerm,
    searchKeywords,
    searchActress,
    searchPublisher,
    searchCode,
    javlibData,
  ]);

  const toggleSCode = () => {
    setSearchCode(true);
    setSearchPublisher(false);
    setSearchActress(false);
    setSearchKeywords(false);
  };

  const toggleSPublisher = () => {
    setSearchPublisher(true);
    setSearchCode(false);
    setSearchActress(false);
    setSearchKeywords(false);
  };

  const toggleSActress = () => {
    setSearchActress(true);
    setSearchPublisher(false);
    setSearchCode(false);
    setSearchKeywords(false);
  };

  const toggleSKeywords = () => {
    setSearchKeywords(true);
    setSearchActress(false);
    setSearchPublisher(false);
    setSearchCode(false);
  };

  return (
    <div>
      <Head>
        <title>My JavLib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex items-center p-4 space-x-10 sticky top-0 z-50 shadow-lg">
        <div className=" cursor-pointer" onClick={() => router.push("/")}>
          <h1 className="text-lg">My JavLib</h1>
        </div>
        <div className="flex relative items-center rounded-md h-10 flex-grow cursor-pointer"></div>
        {searchCode && (
          <input
            className={` font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
             `}
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Search by Code"
          />
        )}
        {searchPublisher && (
          <input
            className={` font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
             `}
            value={searchTerm}
            onChange={handleSearchPublisher}
            placeholder="Search by Publisher"
          />
        )}
        {searchActress && (
          <input
            className={` font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
             `}
            value={searchTerm}
            onChange={handleSearchActress}
            placeholder="Search by Actress"
          />
        )}
        {searchKeywords && (
          <input
            className={` font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
             `}
            value={searchTerm}
            onChange={handleSearchKeywords}
            placeholder="Search by Keywords"
          />
        )}
      </div>
      <div className="pt-4 flex items-center space-x-4 justify-center">
        <div className="flex space-x-6 outline-none">
          <div
            onClick={toggleSCode}
            className={`w-full outline-none hover:bg-gray-500 p-4 rounded-2xl cursor-pointer ${
              searchCode ? "bg-gray-500" : ""
            }`}
          >
            <h3 className={`${searchCode ? "font-bold" : "font-normal"}`}>
              Code
            </h3>
          </div>
          <div
            onClick={toggleSPublisher}
            className={`w-full outline-none    hover:bg-gray-500 p-4 rounded-2xl cursor-pointer ${
              searchPublisher ? "bg-gray-500" : ""
            } `}
          >
            <h3 className={`${searchPublisher ? "font-bold" : "font-normal"}`}>
              Publisher
            </h3>
          </div>
          <div
            onClick={toggleSActress}
            className={`w-full outline-none    hover:bg-gray-500 p-4 rounded-2xl cursor-pointer ${
              searchActress ? "bg-gray-500" : ""
            } `}
          >
            <h3 className={`${searchActress ? "font-bold" : "font-normal"}`}>
              Actress
            </h3>
          </div>
          <div
            onClick={toggleSKeywords}
            className={`w-full outline-none    hover:bg-gray-500 p-4 rounded-2xl cursor-pointer ${
              searchKeywords ? "bg-gray-500" : ""
            } `}
          >
            <h3 className={`${searchKeywords ? "font-bold" : "font-normal"}`}>
              Keywords
            </h3>
          </div>
        </div>
      </div>

      <main className="mx-auto max-w-screen">
        <div className="px-5 my-10 grid grid-flow-row-dense md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {searchResults.map((collection) => (
            <ResultList
              id={collection.id}
              code={collection.code}
              image={collection.image}
              name={collection.name}
              title={collection.title}
              keywords={collection.keywords}
              publisher={collection.publisher}
            />
          ))}
        </div>
      </main>
    </div>
  );
}

export default index;
