import Head from "next/head";

import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import javlibData from "../../config/javlibData.json";
import actress from "../../config/actress.json";
import {
  selectFilter,
  selectMovie,
  updateFilter,
} from "../../features/movieSlice";
import { getUniqueValues, getUniqueName } from "../../utils/helpers";
import Image from "next/image";
import Fade from "react-reveal/Fade";
import ResultList from "../../components/ResultList";
import HeaderItems from "../../components/HeaderItems";
import {
  AdjustmentsIcon,
  BadgeCheckIcon,
  CollectionIcon,
  FireIcon,
  GlobeAltIcon,
  HomeIcon,
  LightningBoltIcon,
  SearchIcon,
  UserIcon,
} from "@heroicons/react/outline";

function index() {
  const dataList = actress;
  const router = useRouter();
  const dispatch = useDispatch();
  const all_movie = useSelector(selectMovie);
  const filterMovie = useSelector(selectFilter);
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState(actress);
  const [searchPublisher, setSearchPublisher] = useState(false);
  const [searchActress, setSearchActress] = useState(true);
  const [showMovie, setShowMovie] = useState(false);
  const excludeColumns = ["id", "color"];

  const name = all_movie ? getUniqueName(all_movie, "name") : null;

  const actressPublisher = actress ? getUniqueName(actress, "publisher") : null;

  const navtoHome = () => {
    router.push("/");
  };

  const navtosearch = () => {
    router.push("/search");
  };

  const navtofilter = () => {
    router.push("/filter");
  };

  const navtowebsite = () => {
    router.push("/website");
  };

  const navtoRank = () => {
    router.push("/actress");
  };

  const handleChange = (value) => {
    setSearchTerm(value);
    filterData(value);
  };

  const filterData = (value) => {
    const Value = value.toLocaleUpperCase().trim();
    if (Value === "") setSearchResults(dataList);
    else {
      const filteredData = dataList.filter((item) => {
        return Object.keys(item).some((key) =>
          excludeColumns.includes(key)
            ? false
            : item[key].toString().toLocaleUpperCase().includes(Value)
        );
      });
      setSearchResults(filteredData);
    }
  };

  const filterCategory = (value, item) => {
    setShowMovie(true);
    if (item === "name") {
      //setLastChange("name");
      const filtered =
        value !== "all"
          ? all_movie.filter((movie) => movie[item].includes(value))
          : all_movie;
      dispatch(updateFilter(filtered));
    }
  };

  {
    /*useEffect(() => {
    const newpublisher = actressPublisher.map((publisher) => publisher);
    console.log("newpublisher", actressPublisher);

    if (searchActress === true) {
      setSearchResults(
        actress.filter((actress) =>
          actress.engname
            .toLocaleUpperCase()
            .includes(searchTerm.toLocaleUpperCase())
        )
      );
    }
    if (searchPublisher === true && searchActress === false) {
      setSearchResults(
        actress.filter((actress) =>
          actress.publisher
            .toLocaleUpperCase()
            .includes(searchTerm.toLocaleUpperCase())
        )
      );
    }
  }, [actress, searchTerm, searchPublisher, searchActress]);*/
  }

  return (
    <div>
      <Head>
        <title>My JavLib Actress</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center sticky top-0 z-50 h-auto m-5">
        <div className="flex items-center space-x-6">
          <div className="flex flex-grow justify-evenly max-w-2xl">
            <HeaderItems title="HOME" Icon={HomeIcon} navtoHome={navtoHome} />
            <HeaderItems
              title="FILTER"
              Icon={AdjustmentsIcon}
              navtosearch={navtofilter}
            />
            <HeaderItems
              title="SEARCH"
              Icon={SearchIcon}
              navtosearch={navtosearch}
            />
            <HeaderItems
              title="WEBSITE"
              Icon={GlobeAltIcon}
              navtosearch={navtowebsite}
            />

            <HeaderItems
              title="ACTRESS"
              Icon={FireIcon}
              navtosearch={navtoRank}
            />
          </div>
        </div>
        {!showMovie && (
          <div className="w-full">
            {searchActress && (
              <input
                className={` font-bold tracking-widest bg-gradient-to-l text-gray-800 from-[#06202A] p-2 px-5 h-full w-full flex-grow rounded flex-shrink rounded-l-md focus:outline-none
           `}
                value={searchTerm}
                onChange={(e) => handleChange(e.target.value)}
                placeholder="Search by Actress"
              />
            )}
          </div>
        )}
      </div>

      <main className="mx-auto max-w-screen">
        {!showMovie && (
          <>
            <div>
              <h1 className="text-6xl text-center mt-10">Actress</h1>
            </div>
          </>
        )}
        {showMovie && (
          <div
            onClick={() => setShowMovie(false)}
            className="flex flex-row item-center justify-center cursor-pointer"
          >
            <h1 className="text-6xl mt-10">{filterMovie?.length} Movies</h1>
          </div>
        )}

        <div className="px-5 my-10 grid grid-flow-row-dense md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5">
          {!showMovie && (
            <>
              {searchResults.map((actress) => (
                <>
                  <Fade bottom>
                    <div
                      key={actress.name}
                      onClick={() => filterCategory(actress.name, "name")}
                      className="p-2 group cursor-pointer transition duration-200 ease-in transform sm:hover:scale-105 hover:z-50"
                    >
                      <Image
                        layout="responsive"
                        src={actress.image}
                        height={1920}
                        width={1080}
                        className=" object-contain"
                      />
                      <div className="p-2 -mt-10 z-50">
                        <h1 className="text-lg text-center">{actress.name}</h1>
                      </div>
                    </div>
                  </Fade>
                </>
              ))}
            </>
          )}
          {showMovie &&
            !!filterMovie?.length &&
            filterMovie.map((collection) => (
              <ResultList
                id={collection.id}
                code={collection.code}
                image={collection.image}
                name={collection.name}
                title={collection.title}
                keywords={collection.keywords}
                publisher={collection.publisher}
                series={collection.series}
              />
            ))}
        </div>
      </main>
    </div>
  );
}

export default index;
